version: '3'
services:
  nginx:
    image: registery.paxton0222.com/nginx
    build:
      context: .
      dockerfile: ./docker/nginx.Dockerfile
    networks:
      - music_broadcast
    ports:
      - 443:443
      - "3000:3000" # server
    volumes:
      - ./conf/nginx.conf:/etc/nginx/nginx.conf
      - ./hls:/mnt/hls
    restart: always
    depends_on:
      - fronted
      - flower
      - server
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  rabbitmq:
    image: "rabbitmq:management"
    networks:
      - music_broadcast
    environment:
      RABBITMQ_ERLANG_COOKIE: "oolong20020222"
      RABBITMQ_DEFAULT_USER: "paxton"
      RABBITMQ_DEFAULT_PASS: "oolong20020222"
    restart: always
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
  redis:
    image: redis:latest 
    volumes:
      - redis_data:/data
    command: ["redis-server", "--appendonly", "yes"]
    networks:
      - music_broadcast
    restart: always
  flower:
    image: mher/flower
    restart: always
    networks:
      - music_broadcast
    environment:
      - FLOWER_URL_PREFIX=/flower
      - FLOWER_BASIC_AUTH=paxton:oolong20020222
      - CELERY_BROKER_URL=amqp://paxton:oolong20020222@rabbitmq//
    depends_on:
      - rabbitmq
      - redis
  server:
    image: registry.paxton0222.com/music-server
    restart: always
    build:
      context: .
      dockerfile: ./docker/fastapi.Dockerfile
      args:
        env_mode: production
    networks:
      - music_broadcast
    depends_on:
      - db
      - rabbitmq
      - redis
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
  fronted:
    image: registry.paxton0222.com/music-fronted
    build:
      context: .
      dockerfile: ./docker/fronted.Dockerfile
      args:
        env_mode: production
    volumes:
      - ./src:/app/src
      - ./index.html:/app/index.html
      - ./public:/app/public
    depends_on:
      - server
    networks:
      - music_broadcast
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
  db:
    image: mysql:latest
    restart: always
    env_file: .env.production
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - music_broadcast
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    platform: "linux/amd64"
    env_file: .env.production
    networks:
      - music_broadcast
    depends_on:
      - db
  celery-worker:
    image: registry.paxton0222.com/music-worker
    build:
      context: .
      dockerfile: ./docker/worker.Dockerfile
      args:
        env_mode: production
    deploy:
      replicas: 5
      restart_policy:
        condition: on-failure
    networks:
      - music_broadcast
    depends_on:
      - db
      - rabbitmq
      - redis
    stop_signal: SIGKILL

networks:
  music_broadcast:

volumes:
  redis_data:
  rabbitmq_data:
  mysql_data: